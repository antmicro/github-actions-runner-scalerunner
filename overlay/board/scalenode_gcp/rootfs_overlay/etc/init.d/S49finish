#!/bin/sh

coordinator_boot_disk=/dev/disk/by-id/scsi-0Google_PersistentDisk_persistent-disk-0
coordinator_sif_disk=/dev/disk/by-id/scsi-0Google_PersistentDisk_gharunnersifimagedisk
coordinator_sif_disk_target_partition=${coordinator_sif_disk}-part1
coordinator_sif_disk_mnt=/mnt/sif

monitor_keys() {
    echo "Monitoring ssh keys for $1"
    wait=0
    while [ true ] ; do
        TMP=`mktemp`
        touch /home/scalerunner/.ssh/authorized_keys_$1
        if [ $wait -eq 1 ]; then
            wait_str="?wait_for_change=true"
        fi
        curl --silent "http://169.254.169.254/computeMetadata/v1/$1/attributes/ssh-keys${wait_str}" -H 'Metadata-Flavor: Google' > $TMP
        cat $TMP | grep ^scalerunner: | cut -f 2- -d ':' > /home/scalerunner/.ssh/authorized_keys_$1
        rm $TMP

        cat /home/scalerunner/.ssh/authorized_keys_$1 > /home/scalerunner/.ssh/authorized_keys

        chown -R scalerunner:scalerunner /home/scalerunner/.ssh

        echo "New keys insterted"
        wait=1
        sleep 1
    done
}

SINGULARITY_INSTANCE_NAME="runner"
monitor_singularity() {
    SCALE=$(curl --silent "http://169.254.169.254/computeMetadata/v1/instance/attributes/SCALE" -H "Metadata-Flavor: Google")
    # check if SCALE is a number
    isnumber_re='^[0-9]+$'
    if ! [[ $SCALE =~ $isnumber_re ]] ; then
        echo "Error: SCALE is not a number! Not starting singularity contaner, please check VM metadata!"
        exit 1
    fi
    if ! mountpoint -q /mnt/persistent; then
        echo "Error: persistent disk not mounted, but it is required! Not starting singularity container!"
        exit 1
    fi
    SINGULARITY_CMD="singularity instance start -C -e --overlay /mnt/persistent/"
    # if log disk is mounted, bind it into container
    if mountpoint -q /mnt/log; then
        # TODO: make sure same user exist in scalerunner,
        # that exists in the container
        # set chown of logs to the runner:runner user in the container
        chown 1000:1001 /mnt/log
        SINGULARITY_CMD="${SINGULARITY_CMD} --bind /mnt/log:/var/log/runner"
    fi
    SINGULARITY_CMD="${SINGULARITY_CMD} ${coordinator_sif_disk_mnt}/image.sif ${SINGULARITY_INSTANCE_NAME} $SCALE"
    while [ true ] ; do
       APP_RUNNING=`singularity instance list  | grep ${SINGULARITY_INSTANCE_NAME} | wc -l`
       if [ $APP_RUNNING = "0" ] && [ -f ${coordinator_sif_disk_mnt}/image.sif ] ; then
	   ${SINGULARITY_CMD}
       fi
       sleep 10
    done
}

send_SIGINT() {
    PIDs=$(ps aux | awk '$(NF-1) ~ /bin\/Runner.Listener$/ && $NF == "run" {print $2}')
    if [ $(echo $PIDS | wc -w) -gt 0 ]; then
        kill -s SIGINT $PIDs
    fi
}

wait_for_listeners() {
    while [ $(ps aux | awk '$(NF-1) ~ /bin\/Runner.Listener$/ && $NF == "run" {print $2}' | wc -l) -ne 0 ]; do
        echo "Waiting for end of actions..."
        sleep 10
    done
}

monitor_sif_disk() {
    while [ true ]; do
        if ! grep -qs $(readlink -f $coordinator_sif_disk_target_partition) /proc/mounts ; then
            send_SIGINT

            while [ ! -b $coordinator_sif_disk_target_partition ]; do
                sleep 5
            done
            mount $coordinator_sif_disk_target_partition $coordinator_sif_disk_mnt

            wait_for_listeners
            echo "Stopping singularity instances"
            singularity instance stop "${SINGULARITY_INSTANCE_NAME}*"
        fi
        sleep 10
    done
}

INTERNAL_METADATA_URL="http://metadata.google.internal/computeMetadata/v1"
curl_metadata() {
    curl --silent "$INTERNAL_METADATA_URL/$1" -H "Metadata-Flavor: Google"
}

reset_instance() {
    UUID=$(uuidgen -t)
    echo "Sending reset with uuid: $UUID"
    curl --request POST --header "Authorization: $AUTH" --data "" "https://compute.googleapis.com/compute/v1/projects/$PROJECT/zones/$ZONE/instances/$INSTANCE_NAME/reset?requestId=$UUID"
}

reset_BOOT_IMAGE_UPDATE() {
    # Get all metadata with fingerprint and change BOOT_IMAGE_UPDATE
    METADATA=$(curl --silent --header "Authorization: $AUTH" "https://compute.googleapis.com/compute/v1/projects/$PROJECT/zones/$ZONE/instances/$INSTANCE_NAME" | jq -cM --arg old "$OLD_BOOT_IMAGE" '.metadata | del(.kind) | (.items[] | select(.key == "BOOT_IMAGE_UPDATE")).value |= $old')
    UUID=$(uuidgen -t)
    # POST metadata update
    curl --silent --request POST --header "Authorization: $AUTH" -H "Content-Type: application/json" --data "$METADATA" "https://compute.googleapis.com/compute/v1/projects/$PROJECT/zones/$ZONE/instances/$INSTANCE_NAME/setMetadata?requestId=$UUID"
    sleep 2
}

monitor_boot_disk() {
    TMP_TAR_NAME=new_boot_image.tar.gz

    PROJECT=$(curl_metadata "project/project-id")
    ZONE=$(curl_metadata "instance/zone" | cut -d/ -f4)
    INSTANCE_NAME=$(hostname)
    AUTH=$(curl_metadata "instance/service-accounts/default/token" | jq -r '.token_type, .access_token')
    OLD_BOOT_IMAGE=$(curl_metadata "instance/attributes/BOOT_IMAGE_UPDATE")

    if [ -b $coordinator_sif_disk ]; then
        SIF_DISK_EXISTS=true
    else
        SIF_DISK_EXISTS=false
    fi

    while [ true ]; do
        TMP=`mktemp`
        TMP_DIR=`mktemp -d`
        # wait for new boot image
        curl_metadata "instance/attributes/BOOT_IMAGE_UPDATE?wait_for_change=true" > $TMP
       
        # download from bucket
        BOOT_IMAGE_FILE="$(cat $TMP | rev | cut -d/ -f1 | rev).tar.gz"
        BUCKET_NAME=$(curl_metadata "instance/attributes/BOOT_IMAGE_BUCKET")
        if ! curl --silent --fail -o $TMP_DIR/$TMP_TAR_NAME "https://storage.googleapis.com/storage/v1/b/${BUCKET_NAME}/o/${BOOT_IMAGE_FILE}?alt=media" -H "Authorization: $AUTH"; then
            rm -r $TMP $TMP_DIR
            reset_BOOT_IMAGE_UPDATE
            continue
        fi
        rm $TMP
    
        # extract tar
        (
            cd $TMP_DIR
            tar -xf $TMP_TAR_NAME
            rm $TMP_TAR_NAME
        )        
        NEW_DISK=$TMP_DIR/$(ls $TMP_DIR)

        # copy new image to boot disk
        BOOT_DISK_SIZE=$(blockdev --getsz $coordinator_boot_disk)
        BOOT_IMAGE_SIZE=$(blockdev --getsz $NEW_DISK)
        if [ $BOOT_IMAGE_SIZE -le $BOOT_DISK_SIZE ]; then
            # kill monitor_singularity & to prevent restarting listeners before restart
            kill -9 $1 $2
            send_SIGINT

            # copy new image to boot disk
            dd if=$NEW_DISK of=$coordinator_boot_disk bs=512
            fdisk -l $coordinator_boot_disk
        else
            echo "Error: New boot image is bigger then available space, aborting"
            rm -r $TMP_DIR
            reset_BOOT_IMAGE_UPDATE
            continue
        fi
    
        rm -r $TMP_DIR
        echo "Boot disk updated with $BOOT_IMAGE_FILE image from $BUCKET_NAME bucket"

        wait_for_listeners
        while [ "$SIF_DISK_EXISTS" == "true" ] && [ ! -b $coordinator_sif_disk ]; do
            echo "Wating for new SIF image..."
            sleep 5
        done
        echo "Restarting..."
        reset_instance
    done
}

start() {
    mkdir -p /etc/sudoers.d
    echo "scalerunner ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/scalerunner

    # wait a bit until dhcp gets ip
    TIMEOUT=0
    while [ true ] ; do
        END=`route -n | grep ^0.0.0.0 | tail -1 | wc -l`
        if [ "$END" = "1" ] ; then
           break
        else
           TIMEOUT=`expr $TIMEOUT + 1`
        fi
        if [ "$TIMEOUT" = "5" ] ; then
           break
        fi
        sleep 1
    done

    GCP=`dmesg | grep "Google Compute Engine" | grep "BIOS Google" | wc -l`

    echo "Detecting if we're running in GCP..."

    coordinator_boot_disk=$coordinator_boot_disk \
    coordinator_sif_disk=$coordinator_sif_disk \
    coordinator_sif_disk_target_partition=$coordinator_sif_disk_target_partition \
    coordinator_sif_disk_mnt=$coordinator_sif_disk_mnt /usr/local/bin/prepare_disk.sh

    if [ "$GCP" = "1" ] ; then
        echo "GCP detected"

        new_hostname=`curl --silent 'http://169.254.169.254/computeMetadata/v1/instance/hostname' -H 'Metadata-Flavor: Google' --max-time 5 --retry 10 --retry-all-errors | cut -f 1 -d '.'`
        echo "Setting hostname to ${new_hostname}"
        sed -i "s#$(hostname)#${new_hostname}#g" /etc/hosts
        hostname "$new_hostname"
        monitor_keys "instance" &
        if [ -b $coordinator_sif_disk_target_partition ]; then
            monitor_sif_disk &
            MONITOR_SIF_DISK_PID=$!
        fi
        sleep 2
        if [ -f ${coordinator_sif_disk_mnt}/image.sif ]; then
            monitor_singularity &
            MONITOR_SINGULARITY_PID=$!
        fi
        if [ -b $coordinator_boot_disk ]; then
            monitor_boot_disk $MONITOR_SINGULARITY_PID $MONITOR_SIF_DISK_PID &
        fi
    fi

    return 0
}

stop() {
    return 0
}

restart() {
    return 0
}

case "$1" in
  start|stop|restart)
         "$1";;
  reload)
         restart;;
  *)
         echo "Usage: $0 {start|stop|restart|reload}"
	 exit 1
esac
